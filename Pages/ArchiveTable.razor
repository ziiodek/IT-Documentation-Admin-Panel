@using ITDocumentation.Classes
@using ITDocumentation.Data
@inject ApplicationDbContext dbContext
@inject NavigationManager _navigationManager
@using System.Text.Json.Nodes
@inject IJSRuntime JS

<RadzenDataGrid 
                AllowPaging="true"
                PageSize="5"
                AllowSorting="true"
                Data="@archiveDocuments"
                TItem="Document">

    <Columns>
        <RadzenDataGridColumn TItem="Document" Property="Document.Name" Title="Name" Width="100%">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Document" Property="Document.AuthorName" Title="Author Name" Width="100%">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Document" Property="Document.DateTime" Title="Creation Date" Width="100%">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Document" Property="Document.ArchiveBy" Title="Archive By" Width="100%">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Document" Title="Tags" Width="100%">
            <Template Context="searchResult">
                @{
                    string documentsTags = getDocumentTags(searchResult.ID);
                    <span>@documentsTags</span>

                }

            </Template>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn TItem="Document" Context="document" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="document">
             <RadzenButton Icon="file_download" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadRow(document))" @onclick:stopPropagation="true">
             </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>


<script suppress-error="BL9992">
    window.triggerFileDownload = (fileName, url) => {
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
    }
</script>


@code {
    [Parameter]
    public List<SearchResult>? results { get; set; }
    [Parameter]
    public List<Document>? archiveDocuments { get; set; }
    [Parameter]
    public EventCallback ReloadArchiveTable__ParentEvent { get; set; }

    TagsHelper tag = new TagsHelper();
    JsonReader reader = new JsonReader();

    void RestoreRow(Document document)
    {

        document.IsArchive = false;
        Document prevDocument = dbContext.Document.First(d => d.ID == document.ID);
        dbContext.Entry(prevDocument).CurrentValues.SetValues(document);
        dbContext.SaveChanges();
        ReloadArchiveTable__ParentEvent.InvokeAsync();

    }

    string getDocumentTags(int documentID)
    {
         Document document = dbContext.Document.First(d => d.ID == documentID);

        string tagString = "";
        JsonNode contentTags = reader.getTags("ContentTags.json");
        JsonObject jsonObj = contentTags.AsObject();
        JsonNode itemTags = contentTags[document.PageID.ToString()]!;

        if (jsonObj.ContainsKey(document.PageID.ToString()))
        {
            if (itemTags["Type"].ToString() == document.Parent)
            {

                foreach (var tagName in contentTags[document.PageID.ToString()]["Tags"].AsArray())
                {

                    tagString += tagName.ToString() + ",";
                }

            }


        }

        return tagString;
    }

    async Task DownloadRow(Document document)
    {
       
          
            string directory = "/DocumentsUploaded/" + document.Parent + "/" + document.PageID;
            var fileName = document.Name;
            var fileURL = directory + "/" + fileName;
            await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);

        

    }


}
