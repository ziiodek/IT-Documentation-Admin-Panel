@using ITDocumentation.Data
@using System.Collections.Generic
@inject ApplicationDbContext dbContext
@inject NavigationManager NavigationManager
@inject DialogService DialogService


<div style="overflow-x:scroll;width:1300px;">
    <RadzenDataGrid @ref="downtimeGrid" AllowFiltering="false"
                    AllowPaging="true" PageSize="20" AllowSorting="true"
                    Data="@downtimeList" TItem="Downtime"
                    AllowColumnResize="true" ColumnWidth="250px">

        <Columns>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.DateTime" Title="Creation Date/Time">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.AuthorName" Title="Author">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.ModifiedBy" Title="Modified By">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.ModifiedDate" Title="Modified Date/Time">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.SystemImpacted" Title="System Impacted">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.Requestor" Title="Requestor">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.Status" Title="Status">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.Ticket" Title="Ticket No.">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.StartTime" Title="Start Date">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.EndTime" Title="End Date">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Context="downtime" Title="Time Lapsed (D:HH:MM)">
                <Template Context="downtime">
                    @{
                        TimeSpan span = CalculateTimeLapseHours(downtime.StartTime, downtime.EndTime);
                        <span>@span.ToString(@"d\.hh\:mm")</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.TimeLapsedMinutes" Title="Time Lapsed (MM)">
                <Template Context="downtime">
                    @{
                        int minutes = CalculateTimeLapseMinutes(downtime.StartTime, downtime.EndTime);
                        <span>@minutes</span>
                    }
                </Template>

            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.Impact" Title="Impact">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.Cause" Title="Cause">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.CorrectiveAction" Title="Corrective Action">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Property="Downtime.Notes" Title="Notes">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Downtime" Context="downtime" TextAlign="TextAlign.Right" Width="100px">
                <Template Context="downtime">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(downtime))" @onclick:stopPropagation="true" data-bs-toggle="collapse" href="#collapseDowntime" role="button" aria-expanded="false" aria-controls="collapseDowntime">
                    </RadzenButton>

                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => ShowDialog(downtime))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>

    </RadzenDataGrid>
</div>

@code {
    [Parameter]
    public List<Downtime> downtimeList { get; set; }
    RadzenDataGrid<Downtime> downtimeGrid;
    [Parameter]
    public EventCallback<string> SetState__parentEvent { get; set; }

    [Parameter]
    public EventCallback<Downtime> SetDowntime__parentEvent { get; set; }


    TimeSpan CalculateTimeLapseHours(DateTime startTime, DateTime endTime)
    {
        TimeSpan timepassed = endTime.Subtract(startTime);
        return timepassed;
    }

    int CalculateTimeLapseMinutes(DateTime startTime, DateTime endTime)
    {
        TimeSpan timepassed = endTime.Subtract(startTime);
        return (int)timepassed.TotalMinutes;


    }

    async Task EditRow(Downtime downtime)
    {
        await SetDowntime__parentEvent.InvokeAsync(downtime);
        await SetState__parentEvent.InvokeAsync("update");
    }

    async Task DeleteRow(Downtime downtime, DialogService ds)
    {

        if (this.downtimeList!.Contains(downtime))
        {
            dbContext.Downtime.Remove(downtime);
            dbContext.SaveChanges();
            downtimeList = dbContext.Downtime.ToList();
            await downtimeGrid!.Reload();


        }

        ds.Close(false);
    }

    async Task ShowDialog(Downtime downtime)
    {

        var result = await DialogService.OpenAsync("Confirmation", ds =>
    @<RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <p>Are you sure you want to delete the record?</p>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => DeleteRow(downtime,ds)" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
        );

    }


}
