@using ITDocumentation.Data
@using Microsoft.EntityFrameworkCore
@using System.Collections.Generic
@inject ApplicationDbContext dbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements Filter
@using System.Text.Json.Nodes
@inject DialogService DialogService
@inject ProtectedSessionStorage ProtectedSessionStore


<h5>Documents Attached to this page</h5>
<br>
<TableFilter nameFilter__parentEvent="@NameFilter"
             authorNameFilter__parentEvent="@AuthorFilter"
             dateFilter__parentEvent="@DateFilter"
             resetFilter__parentEvent="@ResetFilter" />
<br>
<RadzenDataGrid @ref="documentsGrid" AllowAlternatingRows="false" AllowFiltering="true" LoadDate="@LoadData" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@documents" TItem="Document">

    <Columns>
        <RadzenDataGridColumn TItem="Document" Property="Document.Name" Title="Document Name" Width="100%">
            <EditTemplate Context="document">
                <RadzenTextBox @bind-Value=@document.Name style="width:100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Document" Property="Document.AuthorName" Title="Author Name" Width="100%">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Document" Property="Document.DateTime" Title="Creation Date" Width="100%">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Document" Property="Document.Status" Title="Status" Width="100%">
        </RadzenDataGridColumn>
        <!--<RadzenDataGridColumn TItem="Document" Title="Tags" Width="100%">
            <Template Context="document">
                @{
                    string documentsTags = getDocumentTags(document.ID);
                    <span>@documentsTags</span>
                }
            </Template>
        </RadzenDataGridColumn> -->

        <RadzenDataGridColumn TItem="Document" Context="Document" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="document">
                @{
                   // if(pageState != "view")
                    //{

                      <!--  <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="edit" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => EditRow(document))" @onclick:stopPropagation="true">
                        </RadzenButton> -->
                    
                    //}

                }
          
                <RadzenButton Icon="file_download" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadRow(document))" @onclick:stopPropagation="true">
                </RadzenButton>
                <CRUDTable subdepartmentID="@subdepartmentID">
                    @{
                        if (document.Status == "Pending")
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => ApproveRow(document))" @onclick:stopPropagation="true">
                            </RadzenButton>

                        }
                    }

                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Visible=@deleteDocumentDisabled Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => ShowDialog(document))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </CRUDTable>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


<script suppress-error="BL9992">
    window.triggerFileDownload = (fileName, url) => {
    const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
    }
</script>


@code {

    [Parameter]
    public List<Document> documents { get; set; }
    [Parameter]
    public List<Document> tmpDocuments { get; set; }
    [Parameter]
    public int pageID { get; set; }
    [Parameter]
    public string parent { get; set; }
    [Parameter]
    public RadzenDataGrid<Document> documentsGrid { get; set; }
    [Parameter]
    public EventCallback reloadDocumentsTable__parentEvent { get; set; }
    [Parameter]
    public bool deleteDocumentDisabled { get; set; }
    [Parameter]
    public int subdepartmentID { get; set; }
    [Parameter]
    public EventCallback<string> SetDocumentState__ParentEvent { get; set;}
    [Parameter]
    public EventCallback<int> SetDocumentID__ParentEvent { get; set; }
    [Parameter]
    public string pageState { get; set; }

    string directory = "";
    JsonReader reader = new JsonReader();
    bool editDocumentTags = false;
    DocumentsHandler documentHandler;


    protected override async Task OnInitializedAsync()
    {
        if (pageID == -1)
        {
            directory = Directory.GetCurrentDirectory() + "/wwwroot/DocumentsUploaded/tmp" + parent;
        }
        else
        {
            directory = Directory.GetCurrentDirectory() + "/wwwroot/DocumentsUploaded/" + parent + "/" + pageID;
        }

        documentHandler = new DocumentsHandler(dbContext);
    }

    void deleteDocumentInDirectory(string documentName)
    {
        if (pageID == -1)
        {
            directory = Directory.GetCurrentDirectory() + @"\wwwroot\DocumentsUploaded\tmp" + parent;
        }
        else
        {
            directory = Directory.GetCurrentDirectory() + @"\wwwroot/DocumentsUploaded\" + parent + @"\" + pageID;
        }

        if (Directory.Exists(directory))
        {
            foreach (var file in Directory.GetFiles(directory))

            {

                if (File.Exists(file))
                {
                    var fileName = Path.GetFileName(file);

                    if (fileName == documentName)
                    {
                        try
                        {
                            System.IO.File.Delete(file);
                        }
                        catch
                        {

                        }
                    }
                }
            }


        }


    }



    void LoadData(LoadDataArgs args)
    {
        var query = dbContext.Document.AsQueryable();
    }


    async Task DownloadRow(Document document)
    {

        directory = "/itdocs/DocumentsUploaded/" + parent + "/" + pageID;
        var fileName = document.Name;
        var fileURL = directory + "/"+fileName;
        await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);

    }

    async Task EditRow(Document document)
    {

        await SetDocumentState__ParentEvent.InvokeAsync("update");
        await SetDocumentID__ParentEvent.InvokeAsync(document.ID);

    }


    string getDocumentTags(int documentID)
    {
        string tagString = "";
        JsonNode documentTags = reader.getTags("DocumentTags.json");
        JsonObject jsonObj = documentTags.AsObject();
        if (jsonObj.ContainsKey(documentID.ToString()))
        {
            if (documentTags[documentID.ToString()]!.AsArray().Count > 0)
            {

                foreach (var tagName in documentTags[documentID.ToString()]!.AsArray())
                {
                    tagString += tagName!.ToString()+",";
                }
            }
        }

        return tagString;
    }
    async void DeleteRow(Document document, DialogService ds)
    {
        var result = await ProtectedSessionStore.GetAsync<string>("user");
        document.IsArchive = true;
        document.ArchiveTime = DateTime.Now;
        document.ArchiveBy = result.Value.ToUpper();
        Document prevDocument = dbContext.Document.First(d => d.ID == document.ID);
        dbContext.Entry(prevDocument).CurrentValues.SetValues(document);
        dbContext.SaveChanges();
        //documentHandler.DeleteJsonTagsNode(document.ID, "Document");
        reloadDocumentsTable__parentEvent.InvokeAsync();
        ds.Close(false);
    }


    void DeleteRowPermanent(Document document, DialogService ds)
    {

        if (documents!.Contains(document))
        {

            if (dbContext.Document.Any(d => d.ID == document.ID))
            {
                dbContext.Document.Remove(document);
                dbContext.SaveChanges();
            }

            documents.Remove(document);
            reloadDocumentsTable__parentEvent.InvokeAsync();
            deleteDocumentInDirectory(document.Name!);
        }
        else
        {

            reloadDocumentsTable__parentEvent.InvokeAsync();
        }

        ds.Close(false);
    }

    async Task ShowDialog(Document document)
    {

        var result = await DialogService.OpenAsync("Confirmation", ds =>
    @<RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <p>Are you sure you want to delete the record?</p>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => DeleteRow(document,ds)" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
        );

    }


}


@functions {
    public void NameFilter(string name)
    {
        documents = dbContext.Document.Where(d => d.Name!.Contains(name) && d.PageID == pageID && d.Parent == parent).ToList();
    }

    public void AuthorFilter(string authorName)
    {
        documents = dbContext.Document.Where(d => d.AuthorName!.Contains(authorName) && d.PageID == pageID && d.Parent == parent).ToList();
    }

    public void DateFilter(DateTime? date)
    {
        List<Document> tmpDocuments = dbContext.Document.Where(d => d.PageID == pageID && d.Parent == parent).ToList();
        List<Document> dateDocuments = new List<Document>();
        foreach (var document in tmpDocuments)
        {
            DateTime documentDate = document.DateTime;
            DateTime d = date.HasValue ? date.Value : DateTime.Now;
            if (documentDate.ToString().Contains(d.ToString("MM/dd/yyyy")))
            {
                dateDocuments.Add(document);
            }
        }
        documents = dateDocuments;

    }

    public void ResetFilter()
    {
        documents = dbContext.Document.Where(d => d.PageID == pageID && d.Parent == parent).ToList();

    }

    void ApproveRow(Document document)
    {

        document.Status = "Approved";

        Document prevDocument = dbContext.Document.First(d => d.ID == document.ID);
        dbContext.Entry(prevDocument).CurrentValues.SetValues(document);
        dbContext.SaveChanges();

        reloadDocumentsTable__parentEvent.InvokeAsync();


    }

}